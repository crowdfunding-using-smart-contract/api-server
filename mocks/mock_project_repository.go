// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/datasource/repository/project_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "fund-o/api-server/internal/entity"
	pagination "fund-o/api-server/pkg/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockProjectRepository) Count() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockProjectRepositoryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockProjectRepository)(nil).Count))
}

// Create mocks base method.
func (m *MockProjectRepository) Create(project *entity.Project) (*entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", project)
	ret0, _ := ret[0].(*entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectRepositoryMockRecorder) Create(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectRepository)(nil).Create), project)
}

// CreateProjectBacker mocks base method.
func (m *MockProjectRepository) CreateProjectBacker(backer *entity.ProjectBacker) (*entity.ProjectBacker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectBacker", backer)
	ret0, _ := ret[0].(*entity.ProjectBacker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectBacker indicates an expected call of CreateProjectBacker.
func (mr *MockProjectRepositoryMockRecorder) CreateProjectBacker(backer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectBacker", reflect.TypeOf((*MockProjectRepository)(nil).CreateProjectBacker), backer)
}

// CreateProjectRating mocks base method.
func (m *MockProjectRepository) CreateProjectRating(rating *entity.ProjectRating) (*entity.ProjectRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectRating", rating)
	ret0, _ := ret[0].(*entity.ProjectRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectRating indicates an expected call of CreateProjectRating.
func (mr *MockProjectRepositoryMockRecorder) CreateProjectRating(rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectRating", reflect.TypeOf((*MockProjectRepository)(nil).CreateProjectRating), rating)
}

// FindAll mocks base method.
func (m *MockProjectRepository) FindAll(paginateOptions pagination.PaginateFindOptions, findOptions entity.ProjectListOptions) []entity.Project {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", paginateOptions, findOptions)
	ret0, _ := ret[0].([]entity.Project)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockProjectRepositoryMockRecorder) FindAll(paginateOptions, findOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockProjectRepository)(nil).FindAll), paginateOptions, findOptions)
}

// FindAllByOwnerID mocks base method.
func (m *MockProjectRepository) FindAllByOwnerID(ownerID uuid.UUID) ([]entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByOwnerID", ownerID)
	ret0, _ := ret[0].([]entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByOwnerID indicates an expected call of FindAllByOwnerID.
func (mr *MockProjectRepositoryMockRecorder) FindAllByOwnerID(ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByOwnerID", reflect.TypeOf((*MockProjectRepository)(nil).FindAllByOwnerID), ownerID)
}

// FindBackProjectsByUserID mocks base method.
func (m *MockProjectRepository) FindBackProjectsByUserID(userID string) ([]entity.ProjectFunding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBackProjectsByUserID", userID)
	ret0, _ := ret[0].([]entity.ProjectFunding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBackProjectsByUserID indicates an expected call of FindBackProjectsByUserID.
func (mr *MockProjectRepositoryMockRecorder) FindBackProjectsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBackProjectsByUserID", reflect.TypeOf((*MockProjectRepository)(nil).FindBackProjectsByUserID), userID)
}

// FindByID mocks base method.
func (m *MockProjectRepository) FindByID(projectID uuid.UUID) (*entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", projectID)
	ret0, _ := ret[0].(*entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockProjectRepositoryMockRecorder) FindByID(projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProjectRepository)(nil).FindByID), projectID)
}

// FindProjectRating mocks base method.
func (m *MockProjectRepository) FindProjectRating(userID, projectID uuid.UUID) (*entity.ProjectRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProjectRating", userID, projectID)
	ret0, _ := ret[0].(*entity.ProjectRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProjectRating indicates an expected call of FindProjectRating.
func (mr *MockProjectRepositoryMockRecorder) FindProjectRating(userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProjectRating", reflect.TypeOf((*MockProjectRepository)(nil).FindProjectRating), userID, projectID)
}

// FindRecommendation mocks base method.
func (m *MockProjectRepository) FindRecommendation(count int) ([]entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRecommendation", count)
	ret0, _ := ret[0].([]entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRecommendation indicates an expected call of FindRecommendation.
func (mr *MockProjectRepositoryMockRecorder) FindRecommendation(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRecommendation", reflect.TypeOf((*MockProjectRepository)(nil).FindRecommendation), count)
}

// GetProjectBacker mocks base method.
func (m *MockProjectRepository) GetProjectBacker(userID, projectID uuid.UUID) (entity.ProjectBacker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectBacker", userID, projectID)
	ret0, _ := ret[0].(entity.ProjectBacker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectBacker indicates an expected call of GetProjectBacker.
func (mr *MockProjectRepositoryMockRecorder) GetProjectBacker(userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectBacker", reflect.TypeOf((*MockProjectRepository)(nil).GetProjectBacker), userID, projectID)
}

// UpdateProjectBacker mocks base method.
func (m *MockProjectRepository) UpdateProjectBacker(backer *entity.ProjectBacker) (*entity.ProjectBacker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectBacker", backer)
	ret0, _ := ret[0].(*entity.ProjectBacker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectBacker indicates an expected call of UpdateProjectBacker.
func (mr *MockProjectRepositoryMockRecorder) UpdateProjectBacker(backer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectBacker", reflect.TypeOf((*MockProjectRepository)(nil).UpdateProjectBacker), backer)
}
