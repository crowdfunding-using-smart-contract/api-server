// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/datasource/repository/forum_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "fund-o/api-server/internal/entity"
	pagination "fund-o/api-server/pkg/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockForumRepository is a mock of ForumRepository interface.
type MockForumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockForumRepositoryMockRecorder
}

// MockForumRepositoryMockRecorder is the mock recorder for MockForumRepository.
type MockForumRepositoryMockRecorder struct {
	mock *MockForumRepository
}

// NewMockForumRepository creates a new mock instance.
func NewMockForumRepository(ctrl *gomock.Controller) *MockForumRepository {
	mock := &MockForumRepository{ctrl: ctrl}
	mock.recorder = &MockForumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForumRepository) EXPECT() *MockForumRepositoryMockRecorder {
	return m.recorder
}

// CountPost mocks base method.
func (m *MockForumRepository) CountPost() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPost")
	ret0, _ := ret[0].(int64)
	return ret0
}

// CountPost indicates an expected call of CountPost.
func (mr *MockForumRepositoryMockRecorder) CountPost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPost", reflect.TypeOf((*MockForumRepository)(nil).CountPost))
}

// CreateComment mocks base method.
func (m *MockForumRepository) CreateComment(comment *entity.Comment) (*entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockForumRepositoryMockRecorder) CreateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockForumRepository)(nil).CreateComment), comment)
}

// CreatePost mocks base method.
func (m *MockForumRepository) CreatePost(forum *entity.Post) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", forum)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockForumRepositoryMockRecorder) CreatePost(forum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockForumRepository)(nil).CreatePost), forum)
}

// CreateReply mocks base method.
func (m *MockForumRepository) CreateReply(reply *entity.Reply) (*entity.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReply", reply)
	ret0, _ := ret[0].(*entity.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReply indicates an expected call of CreateReply.
func (mr *MockForumRepositoryMockRecorder) CreateReply(reply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReply", reflect.TypeOf((*MockForumRepository)(nil).CreateReply), reply)
}

// FindAllPostsByAuthorID mocks base method.
func (m *MockForumRepository) FindAllPostsByAuthorID(authorID uuid.UUID) ([]entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPostsByAuthorID", authorID)
	ret0, _ := ret[0].([]entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPostsByAuthorID indicates an expected call of FindAllPostsByAuthorID.
func (mr *MockForumRepositoryMockRecorder) FindAllPostsByAuthorID(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPostsByAuthorID", reflect.TypeOf((*MockForumRepository)(nil).FindAllPostsByAuthorID), authorID)
}

// FindPostByID mocks base method.
func (m *MockForumRepository) FindPostByID(id uuid.UUID) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPostByID", id)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPostByID indicates an expected call of FindPostByID.
func (mr *MockForumRepositoryMockRecorder) FindPostByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPostByID", reflect.TypeOf((*MockForumRepository)(nil).FindPostByID), id)
}

// ListPosts mocks base method.
func (m *MockForumRepository) ListPosts(findOptions pagination.PaginateFindOptions) []entity.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", findOptions)
	ret0, _ := ret[0].([]entity.Post)
	return ret0
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockForumRepositoryMockRecorder) ListPosts(findOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockForumRepository)(nil).ListPosts), findOptions)
}
